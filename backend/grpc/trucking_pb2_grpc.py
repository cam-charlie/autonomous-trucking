# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import trucking_pb2 as trucking__pb2


class PositionDataStreamerStub(object):
    """option py_generic_services = true;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getPositionData = channel.unary_unary(
                '/PositionDataStreamer/getPositionData',
                request_serializer=trucking__pb2.TimeDelta.SerializeToString,
                response_deserializer=trucking__pb2.PositionDataStream.FromString,
                )


class PositionDataStreamerServicer(object):
    """option py_generic_services = true;

    """

    def getPositionData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PositionDataStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getPositionData': grpc.unary_unary_rpc_method_handler(
                    servicer.getPositionData,
                    request_deserializer=trucking__pb2.TimeDelta.FromString,
                    response_serializer=trucking__pb2.PositionDataStream.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PositionDataStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PositionDataStreamer(object):
    """option py_generic_services = true;

    """

    @staticmethod
    def getPositionData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PositionDataStreamer/getPositionData',
            trucking__pb2.TimeDelta.SerializeToString,
            trucking__pb2.PositionDataStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConfigurationStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startFromConfig = channel.unary_unary(
                '/ConfigurationStreamer/startFromConfig',
                request_serializer=trucking__pb2.ConfigAsString.SerializeToString,
                response_deserializer=trucking__pb2.Void.FromString,
                )


class ConfigurationStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startFromConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigurationStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startFromConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.startFromConfig,
                    request_deserializer=trucking__pb2.ConfigAsString.FromString,
                    response_serializer=trucking__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ConfigurationStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConfigurationStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startFromConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConfigurationStreamer/startFromConfig',
            trucking__pb2.ConfigAsString.SerializeToString,
            trucking__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
